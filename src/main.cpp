#include <iostream>
#include <string>
#include <variant>

#include "core/decoder/decoder.h"
#include "core/encoder/encoder.h"
#include "protocol/v1/enums.h"
#include "core/encoder/construction_field.h"

int main() {
    std::vector<ConstructionField> bufferFields = {
        ConstructionField(0),                           // Numeric
        ConstructionField("3101501234567898"),
        ConstructionField("90141032111181510720"),
        ConstructionField(1), 
        ConstructionField(std::vector<std::string>{"123", "456", "789"}) // List of OLs
    };

    std::string hexMessage = MbimEncoder::encode(
        MESSAGE_TYPE_ENUM::MBIM_COMMAND_DONE,
        "a289cc33bcbb8b4fb6b0133ec2aae6df",  // UUID
        2,                                   // CID
        0,                                   // succeeded
        bufferFields
    );

    std::cout << "\n\nHEX: " << hexMessage << " END\n";

    // INCORRECT: 03000080C4000000000000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df 02000000 00000000 94000000 00000000 01000000 34000000200000005400000028000000030000007C0000000800000084000000080000008C00000008000000330031003000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000310032003300000034003500360000003700380039000000
    // CORRECT:   0300008034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df 02000000 01000000 08000000 00000000 34000000 20000000540000002800000001000000030000007c0000000800000084000000080000008c00000008000000330031003000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000310032003300000034003500360000003700380039000000
    Decoder decoder(hexMessage);
    decoder.decodeRaw();
    std::cout << decoder.to_string() << "\n";
    // ConstructionField::clear();

    // ConstructionField field1(0);                             // numeric field
    // ConstructionField field2("3101501234567898");                        // single OL field
    // ConstructionField field3("90141032111181510720");
    // ConstructionField field4(1);
    // ConstructionField field5(std::vector<std::string>{"123", "456", "789"});

    // CompiledBuffer buf = compileFields();

    // std::cout << "Info buffer: " << buf.infoBufferHex << std::endl;
    // std::cout << "Data buffer: " << buf.dataBufferHex << std::endl;
    // 03000080C8000000000000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df 02000000 00000000 98000000 00000000 38000000 20000000 58000000 28000000 03000000 03000000 80000000 08000000 88000000 08000000 90000000 08000000 330031003000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000310032003300000034003500360000003700380039000000
    // 0100000034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df 02000000 01000000 08000000 00000000 34000000 20000000 54000000 28000000 01000000 03000000 7c000000 08000000 84000000 08000000 8c000000 08000000          33003100 3000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000310032003300000034003500360000003700380039000000
    //05000000 00000000 08000000 08000000 04000000 0C000000 04000000 10000000 04000000
    // //std::cout <<stringToUtf16LeAligned("789") << std::endl;
    // std::cout << finalHex << std::endl;


    //std::cout << constructHeader(MESSAGE_TYPE_ENUM::MBIM_INDICATE_STATUS_MSG, 52, 4);
    // std::string fileContents = readFile("mbim_log.txt");    
    // std::vector<MatchInfo> parsedLines = parseMbimLines(fileContents);
    // std::vector<MatchInfo> parsedBlocks = parseMbimBlocks(parsedLines);
    // std::string exampleMbim = parsedBlocks[0].matchText;

    // register_all_buffers();

    // std::string mbim_open = "02000080000000000100000000000000";

    // Base query: 0100000034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df020000000000000008000000
    // Base set: 0100000034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df020000000100000008000000

    // CID 1
    // 40000000
    // 18000000
    // 58000000
    // 16000000
    // 6e000000
    // 1e000000
    // 8c000000
    // 1e000000

    // 3C006400610074006100200063006C006100730073003E00
    // 3C006400650076006900630065002000690064003E00
    // 3C006600690072006D007700610072006500200069006E0066006F003E00
    // 3C0068006100720064007700610072006500200069006E0066006F003E00

    // 400000001800000058000000160000006e0000001e0000008c0000001e0000003C006400610074006100200063006C006100730073003E003C006400650076006900630065002000690064003E003C006600690072006D007700610072006500200069006E0066006F003E003C0068006100720064007700610072006500200069006E0066006F003E00

    //  CID 1: 0100000034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df0200000001000000080000000100000001000000020000000200000004000000050000000600000007000000400000001800000058000000160000006e0000001e0000008c0000001e0000003C006400610074006100200063006C006100730073003E003C006400650076006900630065002000690064003E003C006600690072006D007700610072006500200069006E0066006F003E003C0068006100720064007700610072006500200069006E0066006F003E00

    // CID 2 (0 telephone numbers)
    // CID 2 BASE: 0100000034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df020000000100000008000000
    // BASE OFFSET: 4 * 7 = 28 (0x1c)
    // IMSI: 3300310030003100350030003100320033003400350036003700380039000000 (32 bytes )
    // ICCID 380039003000310034003100300033003200310031003100310038003100350031003000370032003000 (40 bytes (0x28))
    // 000000001c0000001e00000030000000280000000100000000000000330031003000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000
    
    // CID 2, 0 elements 
    // 00000000
    // 1c000000
    // 1e000000
    // 30000000
    // 28000000
    // 01000000
    // 00000000
    // 330031003000310035003000310032003300340035003600370038003900
    // 380039003000310034003100300033003200310031003100310038003100350031003000370032003000

    // CID 2, 3 elements
    // Base offset 52
    // 00000000
    // 34000000
    // 20000000
    // 54000000
    // 28000000
    // 01000000
    // 03000000
    // 
    // 7c000000
    // 08000000
    // 84000000
    // 08000000
    // 8c000000
    // 08000000
    //
    //LATEST TEST: 000000003400000020000000540000002800000001000000030000007c0000000800000084000000080000008c00000008000000330031003000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000310032003300000034003500360000003700380039000000
    // 330031003000310035003000310032003300340035003600370038003900   (52, 32) (0x34, 0x20)
    // 380039003000310034003100300033003200310031003100310038003100350031003000370032003000   (84, 40) (0x54, 0x28)
    // 3100320033000000   (124, 8) (0x7C, 0x08)
    // 3400350036000000   (132, 8) (0x84, 0x08)
    // 3700380039000000   (140, 8) (0x8C, 0x08)

    // command done cid 3
    //0300008034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df020000000100000008000000

    //000000003400000020000000540000002800000001000000030000007c0000000800000084000000080000008c00000008000000330031003000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000310032003300000034003500360000003700380039000000

    // CID 3
    // 0100000034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df03000000010000000800000001000000
    
    // // TODO throw warnign if infromation buffer length does not match the actual length
    // std::string mbim_close = "0300008034000000150000000100000000000000a289cc33bcbb8b4fb6b0133ec2aae6df020000000000000008000000000000003400000020000000540000002800000001000000030000007c0000000800000084000000080000008c00000008000000330031003000310035003000310032003300340035003600370038003900380039003000310034003100300033003200310031003100310038003100350031003000370032003000310032003300000034003500360000003700380039000000";
    // hexStream ex(mbim_close);

    // std::cout << mbim_close << std::endl;

    // try {
    //     MBIM_COMMAND_DONE mbim_close_msg(ex);
    //     std::cout << mbim_close_msg.to_string() << std::endl;
    // } catch (MBIMBaseException& e) {
    //     std::cout << e;
    // }

    // std::cout << exampleMbim << std::endl;
    //std::cout << header.to_string() << std::endl;
    // std::cout << header.TRANSACTION_ID << std::endl;
    // std::cout << exampleMbim << std::endl;

    // for (MatchInfo match: parsedBlocks) {
    //     std::cout << match.start << "--" << match.end << ". Line: " << match.line << "    " << match.matchText << std::endl << std::endl;
    // }
}
